# ============================================================================
# DAFU - Data Analytics Functional Utilities
# Docker Compose Configuration with CLI Tool Support
# ============================================================================

version: '3.8'

services:
  # ==========================================================================
  # DAFU CLI Tool - Interactive Fraud Detection
  # ==========================================================================
  dafu-cli:
    build:
      context: .
      dockerfile: fraud_detection/deployment/Dockerfile
    container_name: dafu-cli
    restart: unless-stopped
    stdin_open: true  # Enable interactive mode
    tty: true         # Allocate pseudo-TTY
    environment:
      - FRAUD_DETECTION_ENV=${FRAUD_DETECTION_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dafu}:${POSTGRES_PASSWORD:-dafu_secure_password}@postgres:5432/${POSTGRES_DB:-dafu}
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-dafu}:${RABBITMQ_PASSWORD:-dafu_rabbitmq_password}@rabbitmq:5672/
      - MODEL_STORAGE_PATH=/app/fraud_detection/models
      - RESULTS_PATH=/app/fraud_detection/results
      - PYTHONPATH=/app/fraud_detection:/app/fraud_detection/src
    volumes:
      - ./fraud_detection/models:/app/fraud_detection/models
      - ./fraud_detection/results:/app/fraud_detection/results
      - ./fraud_detection/logs:/app/fraud_detection/logs
      - ./fraud_detection/sample_fraud_data.csv:/app/fraud_detection/sample_fraud_data.csv:ro
    working_dir: /app/fraud_detection
    command: dafu fraud-detection
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - dafu-network
    profiles:
      - cli

  # ==========================================================================
  # Fraud Detection API Service
  # ==========================================================================
  fraud-detection-api:
    build:
      context: .
      dockerfile: fraud_detection/deployment/Dockerfile
    container_name: dafu-fraud-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - FRAUD_DETECTION_ENV=${FRAUD_DETECTION_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - API_WORKERS=${API_WORKERS:-4}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dafu}:${POSTGRES_PASSWORD:-dafu_secure_password}@postgres:5432/${POSTGRES_DB:-dafu}
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-dafu}:${RABBITMQ_PASSWORD:-dafu_rabbitmq_password}@rabbitmq:5672/
      - MODEL_STORAGE_PATH=/app/fraud_detection/models
      - RESULTS_PATH=/app/fraud_detection/results
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key-in-production}
      - API_KEY_ENABLED=${API_KEY_ENABLED:-false}
      - ENABLE_MONITORING=${ENABLE_MONITORING:-true}
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING:-true}
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - WORKER_TIMEOUT=${WORKER_TIMEOUT:-300}
      - PYTHONPATH=/app/fraud_detection:/app/fraud_detection/src
    volumes:
      - ./fraud_detection/models:/app/fraud_detection/models
      - ./fraud_detection/results:/app/fraud_detection/results
      - ./fraud_detection/logs:/app/fraud_detection/logs
    working_dir: /app/fraud_detection
    command: dafu api
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - dafu-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - api

  # ==========================================================================
  # Celery Worker Service
  # ==========================================================================
  celery-worker:
    build:
      context: .
      dockerfile: fraud_detection/deployment/Dockerfile
    container_name: dafu-celery-worker
    restart: unless-stopped
    command: celery -A src.tasks.celery_app worker --loglevel=info --concurrency=4
    environment:
      - FRAUD_DETECTION_ENV=${FRAUD_DETECTION_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-dafu}:${POSTGRES_PASSWORD:-dafu_secure_password}@postgres:5432/${POSTGRES_DB:-dafu}
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-dafu}:${RABBITMQ_PASSWORD:-dafu_rabbitmq_password}@rabbitmq:5672/
      - MODEL_STORAGE_PATH=/app/fraud_detection/models
      - RESULTS_PATH=/app/fraud_detection/results
      - PYTHONPATH=/app/fraud_detection:/app/fraud_detection/src
    volumes:
      - ./fraud_detection/models:/app/fraud_detection/models
      - ./fraud_detection/results:/app/fraud_detection/results
      - ./fraud_detection/logs:/app/fraud_detection/logs
    working_dir: /app/fraud_detection
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - dafu-network
    profiles:
      - workers

  # ==========================================================================
  # PostgreSQL Database
  # ==========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: dafu-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-dafu}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dafu_secure_password}
      - POSTGRES_DB=${POSTGRES_DB:-dafu}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./fraud_detection/deployment/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - dafu-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dafu}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================================================
  # Redis Cache
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: dafu-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - dafu-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================================================
  # RabbitMQ Message Broker
  # ==========================================================================
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: dafu-rabbitmq
    restart: unless-stopped
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-dafu}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-dafu_rabbitmq_password}
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - dafu-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================================================================
  # Prometheus Monitoring
  # ==========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: dafu-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./fraud_detection/deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - dafu-network
    depends_on:
      - fraud-detection-api
    profiles:
      - monitoring

  # ==========================================================================
  # Grafana Dashboards
  # ==========================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: dafu-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./fraud_detection/deployment/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./fraud_detection/deployment/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - dafu-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # ==========================================================================
  # PgAdmin (Database Management UI)
  # ==========================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dafu-pgadmin
    restart: unless-stopped
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@dafu.local}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - dafu-network
    depends_on:
      - postgres
    profiles:
      - tools

  # ==========================================================================
  # Redis Commander (Redis Management UI)
  # ==========================================================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: dafu-redis-commander
    restart: unless-stopped
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379${REDIS_PASSWORD:+:$REDIS_PASSWORD}
    networks:
      - dafu-network
    depends_on:
      - redis
    profiles:
      - tools

# ============================================================================
# Networks
# ============================================================================
networks:
  dafu-network:
    driver: bridge
    name: dafu-network

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres-data:
    name: dafu-postgres-data
  redis-data:
    name: dafu-redis-data
  rabbitmq-data:
    name: dafu-rabbitmq-data
  prometheus-data:
    name: dafu-prometheus-data
  grafana-data:
    name: dafu-grafana-data
  pgadmin-data:
    name: dafu-pgadmin-data
